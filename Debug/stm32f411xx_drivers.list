
stm32f411xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f34  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010cc  080010cc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080010cc  080010cc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080010cc  080010cc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010cc  080010cc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010cc  080010cc  000110cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010d0  080010d0  000110d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080010d4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000004  080010d8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  080010d8  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013bc  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004b6  00000000  00000000  00021433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  000218f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fe  00000000  00000000  00021a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024a9  00000000  00000000  00021b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cce  00000000  00000000  00023ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008f28  00000000  00000000  00025cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000004e0  00000000  00000000  0002ebf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0002f0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080010b4 	.word	0x080010b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080010b4 	.word	0x080010b4

080001d8 <GPIO_PeriClockCtrl>:

/*
 * APIs supported by this driver
 */

void GPIO_PeriClockCtrl(GPIO_RegDef_t *pGPIOx, uint8_t state){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	460b      	mov	r3, r1
 80001e2:	70fb      	strb	r3, [r7, #3]
	if (state == ENABLE) {
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d135      	bne.n	8000256 <GPIO_PeriClockCtrl+0x7e>
		if (pGPIOx == GPIOA) {
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a1d      	ldr	r2, [pc, #116]	; (8000264 <GPIO_PeriClockCtrl+0x8c>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d106      	bne.n	8000200 <GPIO_PeriClockCtrl+0x28>
			GPIOA_PCLK_EN();
 80001f2:	4b1d      	ldr	r3, [pc, #116]	; (8000268 <GPIO_PeriClockCtrl+0x90>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f6:	4a1c      	ldr	r2, [pc, #112]	; (8000268 <GPIO_PeriClockCtrl+0x90>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOE_PCLK_EN();
		}else {
			/*do nothing*/
		}
	}
}
 80001fe:	e02a      	b.n	8000256 <GPIO_PeriClockCtrl+0x7e>
		} else if (pGPIOx == GPIOB) {
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a1a      	ldr	r2, [pc, #104]	; (800026c <GPIO_PeriClockCtrl+0x94>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <GPIO_PeriClockCtrl+0x3e>
			GPIOB_PCLK_EN();
 8000208:	4b17      	ldr	r3, [pc, #92]	; (8000268 <GPIO_PeriClockCtrl+0x90>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a16      	ldr	r2, [pc, #88]	; (8000268 <GPIO_PeriClockCtrl+0x90>)
 800020e:	f043 0302 	orr.w	r3, r3, #2
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000214:	e01f      	b.n	8000256 <GPIO_PeriClockCtrl+0x7e>
		} else if (pGPIOx == GPIOC) {
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a15      	ldr	r2, [pc, #84]	; (8000270 <GPIO_PeriClockCtrl+0x98>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PeriClockCtrl+0x54>
			GPIOC_PCLK_EN();
 800021e:	4b12      	ldr	r3, [pc, #72]	; (8000268 <GPIO_PeriClockCtrl+0x90>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	4a11      	ldr	r2, [pc, #68]	; (8000268 <GPIO_PeriClockCtrl+0x90>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6313      	str	r3, [r2, #48]	; 0x30
}
 800022a:	e014      	b.n	8000256 <GPIO_PeriClockCtrl+0x7e>
		} else if (pGPIOx == GPIOD) {
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a11      	ldr	r2, [pc, #68]	; (8000274 <GPIO_PeriClockCtrl+0x9c>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PeriClockCtrl+0x6a>
			GPIOD_PCLK_EN();
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <GPIO_PeriClockCtrl+0x90>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <GPIO_PeriClockCtrl+0x90>)
 800023a:	f043 0308 	orr.w	r3, r3, #8
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000240:	e009      	b.n	8000256 <GPIO_PeriClockCtrl+0x7e>
		} else if (pGPIOx == GPIOE) {
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a0c      	ldr	r2, [pc, #48]	; (8000278 <GPIO_PeriClockCtrl+0xa0>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d105      	bne.n	8000256 <GPIO_PeriClockCtrl+0x7e>
			GPIOE_PCLK_EN();
 800024a:	4b07      	ldr	r3, [pc, #28]	; (8000268 <GPIO_PeriClockCtrl+0x90>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <GPIO_PeriClockCtrl+0x90>)
 8000250:	f043 0310 	orr.w	r3, r3, #16
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40020000 	.word	0x40020000
 8000268:	40023800 	.word	0x40023800
 800026c:	40020400 	.word	0x40020400
 8000270:	40020800 	.word	0x40020800
 8000274:	40020c00 	.word	0x40020c00
 8000278:	40021000 	.word	0x40021000

0800027c <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandler) {
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; /*temporary register*/
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
	uint8_t reg_selection = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	72fb      	strb	r3, [r7, #11]
	uint8_t pin_selection = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	72bb      	strb	r3, [r7, #10]
	uint8_t port_order = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	727b      	strb	r3, [r7, #9]

	/* 0. Enable GPIO Peripheral Clock */
	GPIO_PeriClockCtrl(pGPIOHandler->pGPIO, ENABLE);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2101      	movs	r1, #1
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ff9c 	bl	80001d8 <GPIO_PeriClockCtrl>

	/* 1. configuration gpio pin mode */
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	795b      	ldrb	r3, [r3, #5]
 80002a4:	2b03      	cmp	r3, #3
 80002a6:	d81f      	bhi.n	80002e8 <GPIO_Init+0x6c>
		temp = pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	795b      	ldrb	r3, [r3, #5]
 80002ac:	461a      	mov	r2, r3
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	791b      	ldrb	r3, [r3, #4]
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	fa02 f303 	lsl.w	r3, r2, r3
 80002b8:	60fb      	str	r3, [r7, #12]
		pGPIOHandler->pGPIO->MODER &= ~(0x03 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	791b      	ldrb	r3, [r3, #4]
 80002c4:	4619      	mov	r1, r3
 80002c6:	2303      	movs	r3, #3
 80002c8:	408b      	lsls	r3, r1
 80002ca:	43db      	mvns	r3, r3
 80002cc:	4619      	mov	r1, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	400a      	ands	r2, r1
 80002d4:	601a      	str	r2, [r3, #0]
		pGPIOHandler->pGPIO->MODER |= temp;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	6819      	ldr	r1, [r3, #0]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	430a      	orrs	r2, r1
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	e0c9      	b.n	800047c <GPIO_Init+0x200>

	} else {
		/*interrupt mode*/
		if ( pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	795b      	ldrb	r3, [r3, #5]
 80002ec:	2b05      	cmp	r3, #5
 80002ee:	d117      	bne.n	8000320 <GPIO_Init+0xa4>
			/* Configuration for Falling Edge IT */
			/* 1. Enable EXTI_FTSR */
			EXTI->FTSR |= (1 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80002f0:	4b4e      	ldr	r3, [pc, #312]	; (800042c <GPIO_Init+0x1b0>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	687a      	ldr	r2, [r7, #4]
 80002f6:	7912      	ldrb	r2, [r2, #4]
 80002f8:	4611      	mov	r1, r2
 80002fa:	2201      	movs	r2, #1
 80002fc:	408a      	lsls	r2, r1
 80002fe:	4611      	mov	r1, r2
 8000300:	4a4a      	ldr	r2, [pc, #296]	; (800042c <GPIO_Init+0x1b0>)
 8000302:	430b      	orrs	r3, r1
 8000304:	60d3      	str	r3, [r2, #12]
			/* 2. Clear the corresponding RTSR */
			EXTI->RTSR &= ~(1 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000306:	4b49      	ldr	r3, [pc, #292]	; (800042c <GPIO_Init+0x1b0>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	7912      	ldrb	r2, [r2, #4]
 800030e:	4611      	mov	r1, r2
 8000310:	2201      	movs	r2, #1
 8000312:	408a      	lsls	r2, r1
 8000314:	43d2      	mvns	r2, r2
 8000316:	4611      	mov	r1, r2
 8000318:	4a44      	ldr	r2, [pc, #272]	; (800042c <GPIO_Init+0x1b0>)
 800031a:	400b      	ands	r3, r1
 800031c:	6093      	str	r3, [r2, #8]
 800031e:	e035      	b.n	800038c <GPIO_Init+0x110>

		} else if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT ) {
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	795b      	ldrb	r3, [r3, #5]
 8000324:	2b04      	cmp	r3, #4
 8000326:	d117      	bne.n	8000358 <GPIO_Init+0xdc>
			/* Configuration for Rising Edge IT*/
			/* 1. Enable EXTI_RTSR */
			EXTI->RTSR |= (1 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000328:	4b40      	ldr	r3, [pc, #256]	; (800042c <GPIO_Init+0x1b0>)
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	7912      	ldrb	r2, [r2, #4]
 8000330:	4611      	mov	r1, r2
 8000332:	2201      	movs	r2, #1
 8000334:	408a      	lsls	r2, r1
 8000336:	4611      	mov	r1, r2
 8000338:	4a3c      	ldr	r2, [pc, #240]	; (800042c <GPIO_Init+0x1b0>)
 800033a:	430b      	orrs	r3, r1
 800033c:	6093      	str	r3, [r2, #8]
			/* 2. Clear the corresponding FTSR */
			EXTI->FTSR &= ~(1 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800033e:	4b3b      	ldr	r3, [pc, #236]	; (800042c <GPIO_Init+0x1b0>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	7912      	ldrb	r2, [r2, #4]
 8000346:	4611      	mov	r1, r2
 8000348:	2201      	movs	r2, #1
 800034a:	408a      	lsls	r2, r1
 800034c:	43d2      	mvns	r2, r2
 800034e:	4611      	mov	r1, r2
 8000350:	4a36      	ldr	r2, [pc, #216]	; (800042c <GPIO_Init+0x1b0>)
 8000352:	400b      	ands	r3, r1
 8000354:	60d3      	str	r3, [r2, #12]
 8000356:	e019      	b.n	800038c <GPIO_Init+0x110>

		} else if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT ) {
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	795b      	ldrb	r3, [r3, #5]
 800035c:	2b06      	cmp	r3, #6
 800035e:	d115      	bne.n	800038c <GPIO_Init+0x110>
			/* Configuration for Rising and Falling Edge IT*/
			/* 1. Enable EXTI_RTSR */
			EXTI->RTSR |= (1 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000360:	4b32      	ldr	r3, [pc, #200]	; (800042c <GPIO_Init+0x1b0>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	7912      	ldrb	r2, [r2, #4]
 8000368:	4611      	mov	r1, r2
 800036a:	2201      	movs	r2, #1
 800036c:	408a      	lsls	r2, r1
 800036e:	4611      	mov	r1, r2
 8000370:	4a2e      	ldr	r2, [pc, #184]	; (800042c <GPIO_Init+0x1b0>)
 8000372:	430b      	orrs	r3, r1
 8000374:	6093      	str	r3, [r2, #8]
			/* 2. Enable EXTI_FTSR */
			EXTI->FTSR |= (1 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000376:	4b2d      	ldr	r3, [pc, #180]	; (800042c <GPIO_Init+0x1b0>)
 8000378:	68db      	ldr	r3, [r3, #12]
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	7912      	ldrb	r2, [r2, #4]
 800037e:	4611      	mov	r1, r2
 8000380:	2201      	movs	r2, #1
 8000382:	408a      	lsls	r2, r1
 8000384:	4611      	mov	r1, r2
 8000386:	4a29      	ldr	r2, [pc, #164]	; (800042c <GPIO_Init+0x1b0>)
 8000388:	430b      	orrs	r3, r1
 800038a:	60d3      	str	r3, [r2, #12]
		}

		/* 2. Configure the GPIO port Selection in SYSCFG_EXTICR */
		reg_selection = pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber / 4;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	791b      	ldrb	r3, [r3, #4]
 8000390:	089b      	lsrs	r3, r3, #2
 8000392:	72fb      	strb	r3, [r7, #11]
		port_order = pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	791b      	ldrb	r3, [r3, #4]
 8000398:	f003 0303 	and.w	r3, r3, #3
 800039c:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 800039e:	4b24      	ldr	r3, [pc, #144]	; (8000430 <GPIO_Init+0x1b4>)
 80003a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003a2:	4a23      	ldr	r2, [pc, #140]	; (8000430 <GPIO_Init+0x1b4>)
 80003a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003a8:	6453      	str	r3, [r2, #68]	; 0x44
		/* clear bit */
		SYSCFG->EXTICRx[reg_selection] &= ~( 0xF << (port_order*4) );
 80003aa:	4a22      	ldr	r2, [pc, #136]	; (8000434 <GPIO_Init+0x1b8>)
 80003ac:	7afb      	ldrb	r3, [r7, #11]
 80003ae:	3302      	adds	r3, #2
 80003b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003b4:	7a7b      	ldrb	r3, [r7, #9]
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	210f      	movs	r1, #15
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	43db      	mvns	r3, r3
 80003c0:	4618      	mov	r0, r3
 80003c2:	491c      	ldr	r1, [pc, #112]	; (8000434 <GPIO_Init+0x1b8>)
 80003c4:	7afb      	ldrb	r3, [r7, #11]
 80003c6:	4002      	ands	r2, r0
 80003c8:	3302      	adds	r3, #2
 80003ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		/* set bit */
		SYSCFG->EXTICRx[reg_selection] |= ( (GPIO_BASEADDR_2_CODE(pGPIOHandler->pGPIO)) << (port_order*4) );
 80003ce:	4a19      	ldr	r2, [pc, #100]	; (8000434 <GPIO_Init+0x1b8>)
 80003d0:	7afb      	ldrb	r3, [r7, #11]
 80003d2:	3302      	adds	r3, #2
 80003d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4916      	ldr	r1, [pc, #88]	; (8000438 <GPIO_Init+0x1bc>)
 80003de:	428b      	cmp	r3, r1
 80003e0:	d036      	beq.n	8000450 <GPIO_Init+0x1d4>
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4915      	ldr	r1, [pc, #84]	; (800043c <GPIO_Init+0x1c0>)
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d01d      	beq.n	8000428 <GPIO_Init+0x1ac>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4913      	ldr	r1, [pc, #76]	; (8000440 <GPIO_Init+0x1c4>)
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d016      	beq.n	8000424 <GPIO_Init+0x1a8>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4912      	ldr	r1, [pc, #72]	; (8000444 <GPIO_Init+0x1c8>)
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d00f      	beq.n	8000420 <GPIO_Init+0x1a4>
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4910      	ldr	r1, [pc, #64]	; (8000448 <GPIO_Init+0x1cc>)
 8000406:	428b      	cmp	r3, r1
 8000408:	d008      	beq.n	800041c <GPIO_Init+0x1a0>
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	490f      	ldr	r1, [pc, #60]	; (800044c <GPIO_Init+0x1d0>)
 8000410:	428b      	cmp	r3, r1
 8000412:	d101      	bne.n	8000418 <GPIO_Init+0x19c>
 8000414:	2307      	movs	r3, #7
 8000416:	e01c      	b.n	8000452 <GPIO_Init+0x1d6>
 8000418:	2300      	movs	r3, #0
 800041a:	e01a      	b.n	8000452 <GPIO_Init+0x1d6>
 800041c:	2304      	movs	r3, #4
 800041e:	e018      	b.n	8000452 <GPIO_Init+0x1d6>
 8000420:	2303      	movs	r3, #3
 8000422:	e016      	b.n	8000452 <GPIO_Init+0x1d6>
 8000424:	2302      	movs	r3, #2
 8000426:	e014      	b.n	8000452 <GPIO_Init+0x1d6>
 8000428:	2301      	movs	r3, #1
 800042a:	e012      	b.n	8000452 <GPIO_Init+0x1d6>
 800042c:	40013c00 	.word	0x40013c00
 8000430:	40023800 	.word	0x40023800
 8000434:	40013800 	.word	0x40013800
 8000438:	40020000 	.word	0x40020000
 800043c:	40020400 	.word	0x40020400
 8000440:	40020800 	.word	0x40020800
 8000444:	40020c00 	.word	0x40020c00
 8000448:	40021000 	.word	0x40021000
 800044c:	40021c00 	.word	0x40021c00
 8000450:	2300      	movs	r3, #0
 8000452:	7a79      	ldrb	r1, [r7, #9]
 8000454:	0089      	lsls	r1, r1, #2
 8000456:	408b      	lsls	r3, r1
 8000458:	4618      	mov	r0, r3
 800045a:	4959      	ldr	r1, [pc, #356]	; (80005c0 <GPIO_Init+0x344>)
 800045c:	7afb      	ldrb	r3, [r7, #11]
 800045e:	4302      	orrs	r2, r0
 8000460:	3302      	adds	r3, #2
 8000462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/* 3. Enable EXTI interrupt delivery using IMR by un-masking bit
		 * *only un-mask the corresponding interrupt line
		 */
		EXTI->IMR |= (1 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000466:	4b57      	ldr	r3, [pc, #348]	; (80005c4 <GPIO_Init+0x348>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	7912      	ldrb	r2, [r2, #4]
 800046e:	4611      	mov	r1, r2
 8000470:	2201      	movs	r2, #1
 8000472:	408a      	lsls	r2, r1
 8000474:	4611      	mov	r1, r2
 8000476:	4a53      	ldr	r2, [pc, #332]	; (80005c4 <GPIO_Init+0x348>)
 8000478:	430b      	orrs	r3, r1
 800047a:	6013      	str	r3, [r2, #0]

	}
	temp = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]

	/* 2. configuration gpio pin speed */
	temp = pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	799b      	ldrb	r3, [r3, #6]
 8000484:	461a      	mov	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	791b      	ldrb	r3, [r3, #4]
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	fa02 f303 	lsl.w	r3, r2, r3
 8000490:	60fb      	str	r3, [r7, #12]
	pGPIOHandler->pGPIO->OSPEEDR &= ~(0x03 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	791b      	ldrb	r3, [r3, #4]
 800049c:	4619      	mov	r1, r3
 800049e:	2303      	movs	r3, #3
 80004a0:	408b      	lsls	r3, r1
 80004a2:	43db      	mvns	r3, r3
 80004a4:	4619      	mov	r1, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	400a      	ands	r2, r1
 80004ac:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIO->OSPEEDR |= temp;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	6899      	ldr	r1, [r3, #8]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	68fa      	ldr	r2, [r7, #12]
 80004ba:	430a      	orrs	r2, r1
 80004bc:	609a      	str	r2, [r3, #8]
	temp = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]

	/* 3. configuration gpio pin pu/pd */
	temp = pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdCtrl << (2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	79db      	ldrb	r3, [r3, #7]
 80004c6:	461a      	mov	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	791b      	ldrb	r3, [r3, #4]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	fa02 f303 	lsl.w	r3, r2, r3
 80004d2:	60fb      	str	r3, [r7, #12]
	pGPIOHandler->pGPIO->PUPDR &= ~(0x03 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	68da      	ldr	r2, [r3, #12]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	4619      	mov	r1, r3
 80004e0:	2303      	movs	r3, #3
 80004e2:	408b      	lsls	r3, r1
 80004e4:	43db      	mvns	r3, r3
 80004e6:	4619      	mov	r1, r3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	400a      	ands	r2, r1
 80004ee:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIO->PUPDR |= temp;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	68d9      	ldr	r1, [r3, #12]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	68fa      	ldr	r2, [r7, #12]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]

	/* 4. configuration gpio pin output type */
	temp = pGPIOHandler->GPIO_PinConfig.GPIO_PinOutputType << (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	7a1b      	ldrb	r3, [r3, #8]
 8000508:	461a      	mov	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	791b      	ldrb	r3, [r3, #4]
 800050e:	fa02 f303 	lsl.w	r3, r2, r3
 8000512:	60fb      	str	r3, [r7, #12]
	pGPIOHandler->pGPIO->OTYPER &= ~(0x01 << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	685a      	ldr	r2, [r3, #4]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	4619      	mov	r1, r3
 8000520:	2301      	movs	r3, #1
 8000522:	408b      	lsls	r3, r1
 8000524:	43db      	mvns	r3, r3
 8000526:	4619      	mov	r1, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	400a      	ands	r2, r1
 800052e:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIO->OTYPER |= temp;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	6859      	ldr	r1, [r3, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	430a      	orrs	r2, r1
 800053e:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]

	/* 5. configuration gpio pin alternate function */
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	795b      	ldrb	r3, [r3, #5]
 8000548:	2b02      	cmp	r3, #2
 800054a:	d132      	bne.n	80005b2 <GPIO_Init+0x336>
		reg_selection = pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber / 8; /*total pin = 16*/
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	791b      	ldrb	r3, [r3, #4]
 8000550:	08db      	lsrs	r3, r3, #3
 8000552:	72fb      	strb	r3, [r7, #11]
		pin_selection = pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	791b      	ldrb	r3, [r3, #4]
 8000558:	f003 0307 	and.w	r3, r3, #7
 800055c:	72bb      	strb	r3, [r7, #10]
		temp = pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * pin_selection);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	7a5b      	ldrb	r3, [r3, #9]
 8000562:	461a      	mov	r2, r3
 8000564:	7abb      	ldrb	r3, [r7, #10]
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	fa02 f303 	lsl.w	r3, r2, r3
 800056c:	60fb      	str	r3, [r7, #12]
		pGPIOHandler->pGPIO->AFR[reg_selection] &= ~(0b1111 << (4 * pin_selection));
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	7afa      	ldrb	r2, [r7, #11]
 8000574:	3208      	adds	r2, #8
 8000576:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800057a:	7abb      	ldrb	r3, [r7, #10]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	220f      	movs	r2, #15
 8000580:	fa02 f303 	lsl.w	r3, r2, r3
 8000584:	43db      	mvns	r3, r3
 8000586:	4618      	mov	r0, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	7afa      	ldrb	r2, [r7, #11]
 800058e:	4001      	ands	r1, r0
 8000590:	3208      	adds	r2, #8
 8000592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandler->pGPIO->AFR[reg_selection] |= temp;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	7afa      	ldrb	r2, [r7, #11]
 800059c:	3208      	adds	r2, #8
 800059e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	7afa      	ldrb	r2, [r7, #11]
 80005a8:	68f9      	ldr	r1, [r7, #12]
 80005aa:	4301      	orrs	r1, r0
 80005ac:	3208      	adds	r2, #8
 80005ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
	temp = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]

}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40013800 	.word	0x40013800
 80005c4:	40013c00 	.word	0x40013c00

080005c8 <GPIO_WriteOutputPin>:
	uint16_t value=0;
	value = (uint16_t) (pGPIOx->IDR);
	return value;
}

void GPIO_WriteOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t value) {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
 80005d4:	4613      	mov	r3, r2
 80005d6:	70bb      	strb	r3, [r7, #2]
	if (value == GPIO_PIN_SET) {
 80005d8:	78bb      	ldrb	r3, [r7, #2]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d109      	bne.n	80005f2 <GPIO_WriteOutputPin+0x2a>
		/*set pin*/
		pGPIOx->ODR |= (1 << PinNumber);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	78fa      	ldrb	r2, [r7, #3]
 80005e4:	2101      	movs	r1, #1
 80005e6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ea:	431a      	orrs	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	615a      	str	r2, [r3, #20]
	} else {
		/*reset pin*/
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 80005f0:	e009      	b.n	8000606 <GPIO_WriteOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	78fa      	ldrb	r2, [r7, #3]
 80005f8:	2101      	movs	r1, #1
 80005fa:	fa01 f202 	lsl.w	r2, r1, r2
 80005fe:	43d2      	mvns	r2, r2
 8000600:	401a      	ands	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	615a      	str	r2, [r3, #20]
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <GPIO_IRQ_ISR_Config>:
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
	pGPIOx->ODR ^= ( 1 << PinNumber);
}


void GPIO_IRQ_ISR_Config(uint8_t IRQNumber, uint8_t state) {
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	460a      	mov	r2, r1
 800061e:	71fb      	strb	r3, [r7, #7]
 8000620:	4613      	mov	r3, r2
 8000622:	71bb      	strb	r3, [r7, #6]
	if ( state == ENABLE) {
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d133      	bne.n	8000692 <GPIO_IRQ_ISR_Config+0x7e>
		/* Enable interrupt */
		if ( IRQNumber <= 31 ) {
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b1f      	cmp	r3, #31
 800062e:	d80a      	bhi.n	8000646 <GPIO_IRQ_ISR_Config+0x32>
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000630:	4b35      	ldr	r3, [pc, #212]	; (8000708 <GPIO_IRQ_ISR_Config+0xf4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	79fa      	ldrb	r2, [r7, #7]
 8000636:	2101      	movs	r1, #1
 8000638:	fa01 f202 	lsl.w	r2, r1, r2
 800063c:	4611      	mov	r1, r2
 800063e:	4a32      	ldr	r2, [pc, #200]	; (8000708 <GPIO_IRQ_ISR_Config+0xf4>)
 8000640:	430b      	orrs	r3, r1
 8000642:	6013      	str	r3, [r2, #0]
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
		} else if ( IRQNumber >= 64 && IRQNumber < 96) {
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
		}
	}
}
 8000644:	e059      	b.n	80006fa <GPIO_IRQ_ISR_Config+0xe6>
		} else if ( IRQNumber > 31 && IRQNumber < 64) {
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b1f      	cmp	r3, #31
 800064a:	d90f      	bls.n	800066c <GPIO_IRQ_ISR_Config+0x58>
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	2b3f      	cmp	r3, #63	; 0x3f
 8000650:	d80c      	bhi.n	800066c <GPIO_IRQ_ISR_Config+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000652:	4b2e      	ldr	r3, [pc, #184]	; (800070c <GPIO_IRQ_ISR_Config+0xf8>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	79fa      	ldrb	r2, [r7, #7]
 8000658:	f002 021f 	and.w	r2, r2, #31
 800065c:	2101      	movs	r1, #1
 800065e:	fa01 f202 	lsl.w	r2, r1, r2
 8000662:	4611      	mov	r1, r2
 8000664:	4a29      	ldr	r2, [pc, #164]	; (800070c <GPIO_IRQ_ISR_Config+0xf8>)
 8000666:	430b      	orrs	r3, r1
 8000668:	6013      	str	r3, [r2, #0]
 800066a:	e046      	b.n	80006fa <GPIO_IRQ_ISR_Config+0xe6>
		} else if ( IRQNumber >= 64 && IRQNumber < 96) {
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b3f      	cmp	r3, #63	; 0x3f
 8000670:	d943      	bls.n	80006fa <GPIO_IRQ_ISR_Config+0xe6>
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b5f      	cmp	r3, #95	; 0x5f
 8000676:	d840      	bhi.n	80006fa <GPIO_IRQ_ISR_Config+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <GPIO_IRQ_ISR_Config+0xfc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000682:	2101      	movs	r1, #1
 8000684:	fa01 f202 	lsl.w	r2, r1, r2
 8000688:	4611      	mov	r1, r2
 800068a:	4a21      	ldr	r2, [pc, #132]	; (8000710 <GPIO_IRQ_ISR_Config+0xfc>)
 800068c:	430b      	orrs	r3, r1
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	e033      	b.n	80006fa <GPIO_IRQ_ISR_Config+0xe6>
		if ( IRQNumber <= 31 ) {
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b1f      	cmp	r3, #31
 8000696:	d80a      	bhi.n	80006ae <GPIO_IRQ_ISR_Config+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <GPIO_IRQ_ISR_Config+0x100>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	2101      	movs	r1, #1
 80006a0:	fa01 f202 	lsl.w	r2, r1, r2
 80006a4:	4611      	mov	r1, r2
 80006a6:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <GPIO_IRQ_ISR_Config+0x100>)
 80006a8:	430b      	orrs	r3, r1
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	e025      	b.n	80006fa <GPIO_IRQ_ISR_Config+0xe6>
		} else if ( IRQNumber > 31 && IRQNumber < 64) {
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	2b1f      	cmp	r3, #31
 80006b2:	d90f      	bls.n	80006d4 <GPIO_IRQ_ISR_Config+0xc0>
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b3f      	cmp	r3, #63	; 0x3f
 80006b8:	d80c      	bhi.n	80006d4 <GPIO_IRQ_ISR_Config+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <GPIO_IRQ_ISR_Config+0x104>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	f002 021f 	and.w	r2, r2, #31
 80006c4:	2101      	movs	r1, #1
 80006c6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ca:	4611      	mov	r1, r2
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <GPIO_IRQ_ISR_Config+0x104>)
 80006ce:	430b      	orrs	r3, r1
 80006d0:	6013      	str	r3, [r2, #0]
 80006d2:	e012      	b.n	80006fa <GPIO_IRQ_ISR_Config+0xe6>
		} else if ( IRQNumber >= 64 && IRQNumber < 96) {
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b3f      	cmp	r3, #63	; 0x3f
 80006d8:	d90f      	bls.n	80006fa <GPIO_IRQ_ISR_Config+0xe6>
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b5f      	cmp	r3, #95	; 0x5f
 80006de:	d80c      	bhi.n	80006fa <GPIO_IRQ_ISR_Config+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <GPIO_IRQ_ISR_Config+0x108>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	79fa      	ldrb	r2, [r7, #7]
 80006e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80006ea:	2101      	movs	r1, #1
 80006ec:	fa01 f202 	lsl.w	r2, r1, r2
 80006f0:	4611      	mov	r1, r2
 80006f2:	4a0a      	ldr	r2, [pc, #40]	; (800071c <GPIO_IRQ_ISR_Config+0x108>)
 80006f4:	430b      	orrs	r3, r1
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	e7ff      	b.n	80006fa <GPIO_IRQ_ISR_Config+0xe6>
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000e100 	.word	0xe000e100
 800070c:	e000e104 	.word	0xe000e104
 8000710:	e000e108 	.word	0xe000e108
 8000714:	e000e180 	.word	0xe000e180
 8000718:	e000e184 	.word	0xe000e184
 800071c:	e000e188 	.word	0xe000e188

08000720 <GPIO_IRQ_PRIO_Config>:

void GPIO_IRQ_PRIO_Config(uint8_t IRQNumber, uint8_t IRQPriority) {
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_index = 0; /* 0 - 59 */
 8000730:	2300      	movs	r3, #0
 8000732:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_order = 0; /* 0 - 3 */
 8000734:	2300      	movs	r3, #0
 8000736:	73bb      	strb	r3, [r7, #14]

	reg_index = IRQNumber / 4;
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	089b      	lsrs	r3, r3, #2
 800073c:	73fb      	strb	r3, [r7, #15]
	reg_order = IRQNumber % 4;
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f003 0303 	and.w	r3, r3, #3
 8000744:	73bb      	strb	r3, [r7, #14]
	/* clear bit first */
	*( NVIC_IPR_BASEADDR + reg_index ) &= ~( 0xF << (reg_order*8 + 4) );
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800074e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	7bbb      	ldrb	r3, [r7, #14]
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	3304      	adds	r3, #4
 800075a:	210f      	movs	r1, #15
 800075c:	fa01 f303 	lsl.w	r3, r1, r3
 8000760:	43db      	mvns	r3, r3
 8000762:	4619      	mov	r1, r3
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800076c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000770:	400a      	ands	r2, r1
 8000772:	601a      	str	r2, [r3, #0]
	/* then set bit */
	*( NVIC_IPR_BASEADDR + reg_index ) |= ( IRQPriority << (reg_order*8 + 4) );
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800077c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	79b9      	ldrb	r1, [r7, #6]
 8000784:	7bbb      	ldrb	r3, [r7, #14]
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	3304      	adds	r3, #4
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	4619      	mov	r1, r3
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000798:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800079c:	430a      	orrs	r2, r1
 800079e:	601a      	str	r2, [r3, #0]
}
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber) {
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	/* Check and clear the EXTI_PR (Pending Register) */
	if (EXTI->PR & (1 << PinNumber)) {
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <GPIO_IRQHandling+0x3c>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	79fa      	ldrb	r2, [r7, #7]
 80007bc:	2101      	movs	r1, #1
 80007be:	fa01 f202 	lsl.w	r2, r1, r2
 80007c2:	4013      	ands	r3, r2
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d009      	beq.n	80007dc <GPIO_IRQHandling+0x30>
		/* Clear by program to 1 */
		EXTI->PR |= (1 << PinNumber);
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <GPIO_IRQHandling+0x3c>)
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	79fa      	ldrb	r2, [r7, #7]
 80007ce:	2101      	movs	r1, #1
 80007d0:	fa01 f202 	lsl.w	r2, r1, r2
 80007d4:	4611      	mov	r1, r2
 80007d6:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <GPIO_IRQHandling+0x3c>)
 80007d8:	430b      	orrs	r3, r1
 80007da:	6153      	str	r3, [r2, #20]
	}
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	40013c00 	.word	0x40013c00

080007ec <SPI_PeriClockCtrl>:
 */
static void SPI_TXE_isr_handler(SPI_Handle_t *pSPIhandle);
static void SPI_RXNE_isr_handler(SPI_Handle_t *pSPIhandle);
static void SPI_OVR_isr_handler();

void SPI_PeriClockCtrl(SPI_RegDef_t *pSPIx, uint8_t state){
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	if (state == ENABLE) {
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d114      	bne.n	8000828 <SPI_PeriClockCtrl+0x3c>
		if (pSPIx == SPI1) {
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <SPI_PeriClockCtrl+0x48>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d106      	bne.n	8000814 <SPI_PeriClockCtrl+0x28>
			SPI1_PCLK_EN();
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <SPI_PeriClockCtrl+0x4c>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	4a0b      	ldr	r2, [pc, #44]	; (8000838 <SPI_PeriClockCtrl+0x4c>)
 800080c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000810:	6453      	str	r3, [r2, #68]	; 0x44
			SPI2_PCLK_EN();
		} else {
			/*do nothing*/
		}
	}
}
 8000812:	e009      	b.n	8000828 <SPI_PeriClockCtrl+0x3c>
		} else if (pSPIx == SPI2) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <SPI_PeriClockCtrl+0x50>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d105      	bne.n	8000828 <SPI_PeriClockCtrl+0x3c>
			SPI2_PCLK_EN();
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <SPI_PeriClockCtrl+0x4c>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a05      	ldr	r2, [pc, #20]	; (8000838 <SPI_PeriClockCtrl+0x4c>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	40013000 	.word	0x40013000
 8000838:	40023800 	.word	0x40023800
 800083c:	40003800 	.word	0x40003800

08000840 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
//	uint32_t temp_reg = 0;

	/* 0. Enable SPI peripheral clock */
	SPI_PeriClockCtrl(pSPIHandle->SPIx, ENABLE);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2101      	movs	r1, #1
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ffcc 	bl	80007ec <SPI_PeriClockCtrl>

	/* 1. Configuration the device mode */
	pSPIHandle->SPIx->CR1 |= (pSPIHandle->SPIConfig.SPI_DeviceMode << 2);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4619      	mov	r1, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	430a      	orrs	r2, r1
 8000868:	601a      	str	r2, [r3, #0]

	/* 2. Bus config */
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_FDUPLEX) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	795b      	ldrb	r3, [r3, #5]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d108      	bne.n	8000884 <SPI_Init+0x44>

		pSPIHandle->SPIx->CR1 &= ~(1 << 15);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	e020      	b.n	80008c6 <SPI_Init+0x86>

	} else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_HDUPLEX) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	795b      	ldrb	r3, [r3, #5]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d108      	bne.n	800089e <SPI_Init+0x5e>

		pSPIHandle->SPIx->CR1 |= (1 << 15);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	e013      	b.n	80008c6 <SPI_Init+0x86>

	} else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_SIMPLEX_RX) {
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	795b      	ldrb	r3, [r3, #5]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d10f      	bne.n	80008c6 <SPI_Init+0x86>

		pSPIHandle->SPIx->CR1 &= ~(1 << 15);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80008b4:	601a      	str	r2, [r3, #0]
		pSPIHandle->SPIx->CR1 |= (1 << 10);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80008c4:	601a      	str	r2, [r3, #0]
	}

	/* 3. SPI clock speed */
	pSPIHandle->SPIx->CR1 |= (pSPIHandle->SPIConfig.SPI_ClkSpeed << 3);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	799b      	ldrb	r3, [r3, #6]
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	4619      	mov	r1, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	430a      	orrs	r2, r1
 80008da:	601a      	str	r2, [r3, #0]

	/* 4. Data frame format */
	pSPIHandle->SPIx->CR1 |= (pSPIHandle->SPIConfig.SPI_DFF << 11);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	79db      	ldrb	r3, [r3, #7]
 80008e6:	02db      	lsls	r3, r3, #11
 80008e8:	4619      	mov	r1, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	430a      	orrs	r2, r1
 80008f0:	601a      	str	r2, [r3, #0]

	/* 5. config CPOL */
	pSPIHandle->SPIx->CR1 |= (pSPIHandle->SPIConfig.SPI_CPOL << 1);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7a1b      	ldrb	r3, [r3, #8]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4619      	mov	r1, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	430a      	orrs	r2, r1
 8000906:	601a      	str	r2, [r3, #0]

	/* 6. config CPHA */
	pSPIHandle->SPIx->CR1 |= (pSPIHandle->SPIConfig.SPI_CPHA << 0);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7a5b      	ldrb	r3, [r3, #9]
 8000912:	4619      	mov	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	430a      	orrs	r2, r1
 800091a:	601a      	str	r2, [r3, #0]

	/* 7. config SSM  */
	pSPIHandle->SPIx->CR1 |= (pSPIHandle->SPIConfig.SPI_SSM << 9);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	7a9b      	ldrb	r3, [r3, #10]
 8000926:	025b      	lsls	r3, r3, #9
 8000928:	4619      	mov	r1, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	430a      	orrs	r2, r1
 8000930:	601a      	str	r2, [r3, #0]

	/* 8. pulled SSI to 1  */
	pSPIHandle->SPIx->CR1 |= (1 << 8);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000940:	601a      	str	r2, [r3, #0]

//	pSPIHandle->SPIx->CR2 &= ~(1 << 2 );

//	pSPIHandle->SPIx->CR1 = temp_reg;

}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <SPI_Transmit>:
void SPI_DeInit(SPI_RegDef_t *pSPIx);

/*
 * Transmit and Receive
 */
uint8_t SPI_Transmit(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len) {
 800094a:	b580      	push	{r7, lr}
 800094c:	b084      	sub	sp, #16
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
	while (len > 0) {
 8000956:	e02e      	b.n	80009b6 <SPI_Transmit+0x6c>
		/* 1. wait for Tx buffer is empty */
		while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_CLEAR);
 8000958:	bf00      	nop
 800095a:	2102      	movs	r1, #2
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	f000 f832 	bl	80009c6 <SPI_GetFlagStatus>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d0f8      	beq.n	800095a <SPI_Transmit+0x10>

		/* 2. Check DFF */
		if ( pSPIx->CR1 & (1 << SPI_CR1_DFF) ) {
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000970:	2b00      	cmp	r3, #0
 8000972:	d00e      	beq.n	8000992 <SPI_Transmit+0x48>
			/* 16 bit frame */
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	60da      	str	r2, [r3, #12]
			len--;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3b01      	subs	r3, #1
 8000982:	607b      	str	r3, [r7, #4]
			len--;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	3301      	adds	r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	e00a      	b.n	80009a8 <SPI_Transmit+0x5e>
		} else {
			/* 8 bit frame */
			*((volatile uint8_t *)&pSPIx->DR) = *pTxBuffer;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	330c      	adds	r3, #12
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	7812      	ldrb	r2, [r2, #0]
 800099a:	701a      	strb	r2, [r3, #0]

//			uint8_t dummy_rx = *(volatile uint8_t *)&pSPIx->DR;
			len--;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
		}
//		pSPIx->CR1
		while ( pSPIx->SR & ( 1 << SPI_SR_BSY ) ); // Wait until the transmission is complete
 80009a8:	bf00      	nop
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1f9      	bne.n	80009aa <SPI_Transmit+0x60>
	while (len > 0) {
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1cd      	bne.n	8000958 <SPI_Transmit+0xe>
	}
}
 80009bc:	bf00      	nop
 80009be:	4618      	mov	r0, r3
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <SPI_GetFlagStatus>:
				pRxBuffer++;
			}
		}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t Flag) {
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	6039      	str	r1, [r7, #0]
	if( (pSPIx->SR & Flag)) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689a      	ldr	r2, [r3, #8]
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	4013      	ands	r3, r2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 80009dc:	2301      	movs	r3, #1
 80009de:	e000      	b.n	80009e2 <SPI_GetFlagStatus+0x1c>
	} else {
		return FLAG_CLEAR;
 80009e0:	2300      	movs	r3, #0
	}
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <SPI_Receive_IT>:
	}
	return pSPIhandle->TxState;
}


uint8_t SPI_Receive_IT(SPI_Handle_t *pSPIhandle, uint8_t *pRxBuffer, uint32_t len) {
 80009ee:	b480      	push	{r7}
 80009f0:	b085      	sub	sp, #20
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
	/*check SPI data register is not in  another Rx transmit */
	if (pSPIhandle->RxState != SPI_RX_BUSY) {
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	7f5b      	ldrb	r3, [r3, #29]
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d010      	beq.n	8000a24 <SPI_Receive_IT+0x36>
		/* 1.save Rx buffer and Length in to global variables*/
		pSPIhandle->pRxBuffer = pRxBuffer;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	611a      	str	r2, [r3, #16]
		pSPIhandle->RxLength = len;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	619a      	str	r2, [r3, #24]

		/* 1.Mark SPI in busy state */
		pSPIhandle->RxState = SPI_RX_BUSY;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2202      	movs	r2, #2
 8000a12:	775a      	strb	r2, [r3, #29]

		/* 1.Enable TXEIE control bit to get interrupt whenever TXE flag is set on SR */
		pSPIhandle->SPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	685a      	ldr	r2, [r3, #4]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a22:	605a      	str	r2, [r3, #4]

		/* 1.Data transmission will be handled by the SPI_ISR code */
	}
	return pSPIhandle->RxState;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	7f5b      	ldrb	r3, [r3, #29]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <SPI_ISR_Handler>:

void SPI_ISR_Handler(SPI_Handle_t *pSPIhandle) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	uint8_t flag_check = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]
	uint8_t isr_flag_check = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73bb      	strb	r3, [r7, #14]

	/* 1. Check ISR called by Tx*/
	flag_check = (uint8_t)SPI_GetFlagStatus(pSPIhandle->SPIx, SPI_TXE_FLAG);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2102      	movs	r1, #2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ffbb 	bl	80009c6 <SPI_GetFlagStatus>
 8000a50:	4603      	mov	r3, r0
 8000a52:	73fb      	strb	r3, [r7, #15]
	isr_flag_check = pSPIhandle->SPIx->CR2 & (1 << SPI_CR2_TXEIE);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a60:	73bb      	strb	r3, [r7, #14]

	if (flag_check && isr_flag_check) {
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d005      	beq.n	8000a74 <SPI_ISR_Handler+0x40>
 8000a68:	7bbb      	ldrb	r3, [r7, #14]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <SPI_ISR_Handler+0x40>
		SPI_TXE_isr_handler(pSPIhandle);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 f834 	bl	8000adc <SPI_TXE_isr_handler>
	}

	/* 2. Check ISR called by Rx*/
	flag_check = (uint8_t)SPI_GetFlagStatus(pSPIhandle->SPIx, SPI_RXNE_FLAG);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2101      	movs	r1, #1
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ffa3 	bl	80009c6 <SPI_GetFlagStatus>
 8000a80:	4603      	mov	r3, r0
 8000a82:	73fb      	strb	r3, [r7, #15]
	isr_flag_check = pSPIhandle->SPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a90:	73bb      	strb	r3, [r7, #14]

	if (flag_check && isr_flag_check) {
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d005      	beq.n	8000aa4 <SPI_ISR_Handler+0x70>
 8000a98:	7bbb      	ldrb	r3, [r7, #14]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d002      	beq.n	8000aa4 <SPI_ISR_Handler+0x70>
		SPI_RXNE_isr_handler(pSPIhandle);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 f86f 	bl	8000b82 <SPI_RXNE_isr_handler>
	}

	/* 3. Check ISR called by overRun*/
	flag_check = (uint8_t)SPI_GetFlagStatus(pSPIhandle->SPIx, SPI_OVR_FLAG);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2140      	movs	r1, #64	; 0x40
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ff8b 	bl	80009c6 <SPI_GetFlagStatus>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	73fb      	strb	r3, [r7, #15]
	isr_flag_check = pSPIhandle->SPIx->CR2 & (1 << SPI_CR2_ERRIE);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f003 0320 	and.w	r3, r3, #32
 8000ac0:	73bb      	strb	r3, [r7, #14]

	if (flag_check && isr_flag_check) {
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d005      	beq.n	8000ad4 <SPI_ISR_Handler+0xa0>
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <SPI_ISR_Handler+0xa0>
			SPI_OVR_isr_handler(pSPIhandle);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f000 f8b0 	bl	8000c34 <SPI_OVR_isr_handler>
		}
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <SPI_TXE_isr_handler>:

/*
 *	Helper Function
 */
static void SPI_TXE_isr_handler(SPI_Handle_t *pSPIhandle) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	/* Tranfer data from TxBuffer to SPI_DR */
	if ( pSPIhandle->SPIx->CR1 & (1 << SPI_CR1_DFF) ) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d01a      	beq.n	8000b28 <SPI_TXE_isr_handler+0x4c>
				/* 16 bit frame */
		pSPIhandle->SPIx->DR = *((uint16_t*)pSPIhandle->pTxBuffer);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	881a      	ldrh	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	60da      	str	r2, [r3, #12]
		pSPIhandle->TxLength--;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	615a      	str	r2, [r3, #20]
		pSPIhandle->TxLength--;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	1e5a      	subs	r2, r3, #1
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	615a      	str	r2, [r3, #20]
		(pSPIhandle->pTxBuffer)++;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	60da      	str	r2, [r3, #12]
		(pSPIhandle->pTxBuffer)++;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	1c5a      	adds	r2, r3, #1
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	e00f      	b.n	8000b48 <SPI_TXE_isr_handler+0x6c>
	} else {
		/* 8 bit frame */
		pSPIhandle->SPIx->DR = *(pSPIhandle->pTxBuffer);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	60da      	str	r2, [r3, #12]
		pSPIhandle->TxLength--;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	1e5a      	subs	r2, r3, #1
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	615a      	str	r2, [r3, #20]
		pSPIhandle->pTxBuffer++;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	60da      	str	r2, [r3, #12]
	}

	/*Transmit done*/
	if ( !pSPIhandle->TxLength ) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d114      	bne.n	8000b7a <SPI_TXE_isr_handler+0x9e>
		/* 1. Prevent interrupt by clear TXEIE bit */
		pSPIhandle->SPIx->CR2 &= ~(1 << SPI_CR2_TXEIE);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b5e:	605a      	str	r2, [r3, #4]
		pSPIhandle->pTxBuffer = NULL;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
		pSPIhandle->TxLength = 0;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
		pSPIhandle->TxState = SPI_READY;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	771a      	strb	r2, [r3, #28]
		SPI_ApplicationEventCallback(pSPIhandle, SPI_EVENT_TX_CMPLT);
 8000b72:	2101      	movs	r1, #1
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f893 	bl	8000ca0 <SPI_ApplicationEventCallback>
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <SPI_RXNE_isr_handler>:

static void SPI_RXNE_isr_handler(SPI_Handle_t *pSPIhandle) {
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
	/* 2. Check DFF */
	if ( pSPIhandle->SPIx->CR1 & (1 << SPI_CR1_DFF) ) {
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d01b      	beq.n	8000bd0 <SPI_RXNE_isr_handler+0x4e>
		/* 16 bit frame */
		*((uint16_t*)pSPIhandle->pRxBuffer) = pSPIhandle->SPIx->DR;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	68da      	ldr	r2, [r3, #12]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	b292      	uxth	r2, r2
 8000ba4:	801a      	strh	r2, [r3, #0]
		pSPIhandle->RxLength--;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	1e5a      	subs	r2, r3, #1
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	619a      	str	r2, [r3, #24]
		pSPIhandle->RxLength--;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	1e5a      	subs	r2, r3, #1
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	619a      	str	r2, [r3, #24]
		pSPIhandle->pRxBuffer++;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	611a      	str	r2, [r3, #16]
		pSPIhandle->pRxBuffer++;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	1c5a      	adds	r2, r3, #1
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	611a      	str	r2, [r3, #16]
 8000bce:	e014      	b.n	8000bfa <SPI_RXNE_isr_handler+0x78>
	} else {
		/* 8 bit frame */
		/*dummy byte 0xAA send*/
		pSPIhandle->SPIx->DR = 0xAA;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	22aa      	movs	r2, #170	; 0xaa
 8000bd6:	60da      	str	r2, [r3, #12]
		/*collect data*/
		*(pSPIhandle->pRxBuffer) = pSPIhandle->SPIx->DR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	68da      	ldr	r2, [r3, #12]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	701a      	strb	r2, [r3, #0]
		pSPIhandle->RxLength--;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	1e5a      	subs	r2, r3, #1
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	619a      	str	r2, [r3, #24]
		pSPIhandle->pRxBuffer++;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	611a      	str	r2, [r3, #16]
	}

	/*transmission done, RxBuffer is empty*/
	if (!pSPIhandle->RxLength) {
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d114      	bne.n	8000c2c <SPI_RXNE_isr_handler+0xaa>
		pSPIhandle->SPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c10:	605a      	str	r2, [r3, #4]
		pSPIhandle->pRxBuffer = NULL;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
		pSPIhandle->RxLength = 0;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
		pSPIhandle->RxState = SPI_READY;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	775a      	strb	r2, [r3, #29]
		SPI_ApplicationEventCallback(pSPIhandle, SPI_EVENT_RX_CMPLT);
 8000c24:	2100      	movs	r1, #0
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f83a 	bl	8000ca0 <SPI_ApplicationEventCallback>
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <SPI_OVR_isr_handler>:
static void SPI_OVR_isr_handler(SPI_Handle_t *pSPIhandle) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	/* dummy variable to read from DR and SR*/
	uint8_t temp = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73fb      	strb	r3, [r7, #15]
	/* 1. Clear the overflag*/
	/* Check SPI is NOT in TX transmit */
	if (pSPIhandle->TxState != SPI_TX_BUSY) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7f1b      	ldrb	r3, [r3, #28]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d007      	beq.n	8000c58 <SPI_OVR_isr_handler+0x24>
		temp = pSPIhandle->SPIx->DR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	73fb      	strb	r3, [r7, #15]
		temp = pSPIhandle->SPIx->SR;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	73fb      	strb	r3, [r7, #15]
	}
	(void) temp;
	SPI_ApplicationEventCallback(pSPIhandle, SPI_EVENT_OVR_ERR);
 8000c58:	2102      	movs	r1, #2
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 f820 	bl	8000ca0 <SPI_ApplicationEventCallback>

}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t state) {
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
	if (state == ENABLE) {
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d106      	bne.n	8000c88 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= ( 1 << SPI_CR1_SPE);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~( 1 << SPI_CR1_SPE);
	}
}
 8000c86:	e005      	b.n	8000c94 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~( 1 << SPI_CR1_SPE);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	601a      	str	r2, [r3, #0]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <SPI_ApplicationEventCallback>:

__attribute__((weak)) void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIhandle, uint8_t event) {
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	70fb      	strb	r3, [r7, #3]

}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <delay>:
int byteTxCounter = 0;

SPI_Handle_t SPI1_Handle;
SPI_Handle_t SPI2_Handle;

void delay(void) {
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
	for (uint32_t i =0; i < 500000; i++) {
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	e002      	b.n	8000cca <delay+0x12>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <delay+0x28>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d9f8      	bls.n	8000cc4 <delay+0xc>

	}
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	0007a11f 	.word	0x0007a11f

08000ce4 <main>:

int main(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	; 0x30
 8000ce8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_LED, GPIO_BTN;
	memset(&GPIO_LED, 0, sizeof(GPIO_LED));
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	220c      	movs	r2, #12
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f9b1 	bl	800105a <memset>
	memset(&GPIO_BTN, 0, sizeof(GPIO_BTN));
 8000cf8:	f107 0318 	add.w	r3, r7, #24
 8000cfc:	220c      	movs	r2, #12
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f9aa 	bl	800105a <memset>

	GPIO_LED.pGPIO = GPIOC;
 8000d06:	4ba6      	ldr	r3, [pc, #664]	; (8000fa0 <main+0x2bc>)
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_LED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000d0a:	230d      	movs	r3, #13
 8000d0c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_LED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000d10:	2301      	movs	r3, #1
 8000d12:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	GPIO_LED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d16:	2302      	movs	r3, #2
 8000d18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	GPIO_LED.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_PU;		/* pull-up*/
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	GPIO_LED.GPIO_PinConfig.GPIO_PinOutputType = GPIO_OUT_PUSHPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
//	GPIO_LED.GPIO_PinConfig.GPIO_PinAltFuncMode = GPIO_SPEED_FAST;
//	GPIO_PeriClockCtrl(GPIO_LED.pGPIO, ENABLE);
	GPIO_Init(&GPIO_LED);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff faa5 	bl	800027c <GPIO_Init>

	GPIO_BTN.pGPIO = GPIOA;
 8000d32:	4b9c      	ldr	r3, [pc, #624]	; (8000fa4 <main+0x2c0>)
 8000d34:	61bb      	str	r3, [r7, #24]
	GPIO_BTN.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	773b      	strb	r3, [r7, #28]
	GPIO_BTN.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	777b      	strb	r3, [r7, #29]
	GPIO_BTN.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	77bb      	strb	r3, [r7, #30]
	GPIO_BTN.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_PU;		/* pull-up*/
 8000d42:	2301      	movs	r3, #1
 8000d44:	77fb      	strb	r3, [r7, #31]
//	GPIO_BTN.GPIO_PinConfig.GPIO_PinOutputType = GPIO_OUT_PUSHPULL;

//	GPIO_PeriClockCtrl(GPIO_BTN.pGPIO, ENABLE);
	GPIO_Init(&GPIO_BTN);
 8000d46:	f107 0318 	add.w	r3, r7, #24
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fa96 	bl	800027c <GPIO_Init>
	/*interrupt configure*/
	GPIO_IRQ_PRIO_Config(IRQ_NO_EXTI0, IRQ_PRIO_3);
 8000d50:	2103      	movs	r1, #3
 8000d52:	2006      	movs	r0, #6
 8000d54:	f7ff fce4 	bl	8000720 <GPIO_IRQ_PRIO_Config>
	GPIO_IRQ_ISR_Config(IRQ_NO_EXTI0, ENABLE);
 8000d58:	2101      	movs	r1, #1
 8000d5a:	2006      	movs	r0, #6
 8000d5c:	f7ff fc5a 	bl	8000614 <GPIO_IRQ_ISR_Config>
	 * SPI1_MISO 	-	A6
	 * SPI1_MOSI	-	A7
	 */
	/* 1. Configure GPIO for SPI1 */
	GPIO_Handle_t GPIO_SPI1;
	memset(&GPIO_SPI1, 0, sizeof(GPIO_SPI1));
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	220c      	movs	r2, #12
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f976 	bl	800105a <memset>

	GPIO_SPI1.pGPIO = GPIOA;
 8000d6e:	4b8d      	ldr	r3, [pc, #564]	; (8000fa4 <main+0x2c0>)
 8000d70:	60fb      	str	r3, [r7, #12]
//	GPIO_SPI1.GPIO_PinConfig.GPIO_PinAltFuncMode = GPIO_ALTFUNC_5;



	/* SPI1_CLK */
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000d72:	2302      	movs	r3, #2
 8000d74:	747b      	strb	r3, [r7, #17]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d76:	2302      	movs	r3, #2
 8000d78:	74bb      	strb	r3, [r7, #18]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	74fb      	strb	r3, [r7, #19]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinOutputType = GPIO_OUT_PUSHPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	753b      	strb	r3, [r7, #20]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinAltFuncMode = GPIO_ALTFUNC_5;
 8000d82:	2305      	movs	r3, #5
 8000d84:	757b      	strb	r3, [r7, #21]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000d86:	2305      	movs	r3, #5
 8000d88:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GPIO_SPI1);
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fa74 	bl	800027c <GPIO_Init>

	/* SPI1_MISO */
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000d94:	2302      	movs	r3, #2
 8000d96:	747b      	strb	r3, [r7, #17]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	74bb      	strb	r3, [r7, #18]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	74fb      	strb	r3, [r7, #19]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinOutputType = GPIO_OUT_PUSHPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	753b      	strb	r3, [r7, #20]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinAltFuncMode = GPIO_ALTFUNC_5;
 8000da4:	2305      	movs	r3, #5
 8000da6:	757b      	strb	r3, [r7, #21]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000da8:	2306      	movs	r3, #6
 8000daa:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GPIO_SPI1);
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fa63 	bl	800027c <GPIO_Init>

	/* SPI1_MOSI */
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000db6:	2302      	movs	r3, #2
 8000db8:	747b      	strb	r3, [r7, #17]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	74bb      	strb	r3, [r7, #18]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	74fb      	strb	r3, [r7, #19]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinOutputType = GPIO_OUT_PUSHPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	753b      	strb	r3, [r7, #20]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinAltFuncMode = GPIO_ALTFUNC_5;
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	757b      	strb	r3, [r7, #21]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000dca:	2307      	movs	r3, #7
 8000dcc:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GPIO_SPI1);
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fa52 	bl	800027c <GPIO_Init>

	/* SPI1_SS */
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	747b      	strb	r3, [r7, #17]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	74bb      	strb	r3, [r7, #18]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PIN_PU;
 8000de0:	2301      	movs	r3, #1
 8000de2:	74fb      	strb	r3, [r7, #19]
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinOutputType = GPIO_OUT_PUSHPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	753b      	strb	r3, [r7, #20]
//	GPIO_SPI1.GPIO_PinConfig.GPIO_PinAltFuncMode = GPIO_ALTFUNC_5;
	GPIO_SPI1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8000de8:	2304      	movs	r3, #4
 8000dea:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GPIO_SPI1);
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fa43 	bl	800027c <GPIO_Init>

	/* 2. Configure SPI1 properties */
//	SPI_Handle_t SPI1_Handle;
	memset(&SPI1_Handle, 0, sizeof(SPI1_Handle));
 8000df6:	2220      	movs	r2, #32
 8000df8:	2100      	movs	r1, #0
 8000dfa:	486b      	ldr	r0, [pc, #428]	; (8000fa8 <main+0x2c4>)
 8000dfc:	f000 f92d 	bl	800105a <memset>

	SPI1_Handle.SPIx = SPI1;
 8000e00:	4b69      	ldr	r3, [pc, #420]	; (8000fa8 <main+0x2c4>)
 8000e02:	4a6a      	ldr	r2, [pc, #424]	; (8000fac <main+0x2c8>)
 8000e04:	601a      	str	r2, [r3, #0]
	SPI1_Handle.SPIConfig.SPI_DeviceMode = SPI_MODE_MASTER;
 8000e06:	4b68      	ldr	r3, [pc, #416]	; (8000fa8 <main+0x2c4>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	711a      	strb	r2, [r3, #4]
	SPI1_Handle.SPIConfig.SPI_BusConfig = SPI_BUS_FDUPLEX;
 8000e0c:	4b66      	ldr	r3, [pc, #408]	; (8000fa8 <main+0x2c4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	715a      	strb	r2, [r3, #5]
	SPI1_Handle.SPIConfig.SPI_ClkSpeed = SPI_CLOCK_SPEED_DIV_8;
 8000e12:	4b65      	ldr	r3, [pc, #404]	; (8000fa8 <main+0x2c4>)
 8000e14:	2202      	movs	r2, #2
 8000e16:	719a      	strb	r2, [r3, #6]
	SPI1_Handle.SPIConfig.SPI_DFF = SPI_DATA_FRAME_8;
 8000e18:	4b63      	ldr	r3, [pc, #396]	; (8000fa8 <main+0x2c4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	71da      	strb	r2, [r3, #7]
	SPI1_Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000e1e:	4b62      	ldr	r3, [pc, #392]	; (8000fa8 <main+0x2c4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	721a      	strb	r2, [r3, #8]
	SPI1_Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000e24:	4b60      	ldr	r3, [pc, #384]	; (8000fa8 <main+0x2c4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	725a      	strb	r2, [r3, #9]
	SPI1_Handle.SPIConfig.SPI_SSM = SPI_SSM_EN;
 8000e2a:	4b5f      	ldr	r3, [pc, #380]	; (8000fa8 <main+0x2c4>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI1_Handle);
 8000e30:	485d      	ldr	r0, [pc, #372]	; (8000fa8 <main+0x2c4>)
 8000e32:	f7ff fd05 	bl	8000840 <SPI_Init>
	 * SPI2_MOSI	-	B15
	 */

	/* 1. Configure GPIO for SPI2 */
	GPIO_Handle_t GPIO_SPI2;
	memset(&GPIO_SPI2, 0, sizeof(GPIO_SPI2));
 8000e36:	463b      	mov	r3, r7
 8000e38:	220c      	movs	r2, #12
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f90c 	bl	800105a <memset>

	GPIO_SPI2.pGPIO = GPIOB;
 8000e42:	4b5b      	ldr	r3, [pc, #364]	; (8000fb0 <main+0x2cc>)
 8000e44:	603b      	str	r3, [r7, #0]
//	GPIO_SPI2.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
//	GPIO_SPI2.GPIO_PinConfig.GPIO_PinOutputType = GPIO_OUT_PUSHPULL;
//	GPIO_SPI2.GPIO_PinConfig.GPIO_PinAltFuncMode = GPIO_ALTFUNC_5;

	/* SPI2_SS */
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000e46:	2302      	movs	r3, #2
 8000e48:	717b      	strb	r3, [r7, #5]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	71bb      	strb	r3, [r7, #6]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71fb      	strb	r3, [r7, #7]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinOutputType = GPIO_OUT_PUSHPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	723b      	strb	r3, [r7, #8]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinAltFuncMode = GPIO_ALTFUNC_5;
 8000e56:	2305      	movs	r3, #5
 8000e58:	727b      	strb	r3, [r7, #9]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8000e5a:	2309      	movs	r3, #9
 8000e5c:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO_SPI2);
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fa0b 	bl	800027c <GPIO_Init>

	/* SPI2_CLK */
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000e66:	2302      	movs	r3, #2
 8000e68:	717b      	strb	r3, [r7, #5]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	71bb      	strb	r3, [r7, #6]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	71fb      	strb	r3, [r7, #7]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinOutputType = GPIO_OUT_PUSHPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	723b      	strb	r3, [r7, #8]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinAltFuncMode = GPIO_ALTFUNC_5;
 8000e76:	2305      	movs	r3, #5
 8000e78:	727b      	strb	r3, [r7, #9]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO_SPI2);
 8000e7e:	463b      	mov	r3, r7
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff f9fb 	bl	800027c <GPIO_Init>

	/* SPI2_MISO */
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000e86:	2302      	movs	r3, #2
 8000e88:	717b      	strb	r3, [r7, #5]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	71bb      	strb	r3, [r7, #6]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71fb      	strb	r3, [r7, #7]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinOutputType = GPIO_OUT_PUSHPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	723b      	strb	r3, [r7, #8]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinAltFuncMode = GPIO_ALTFUNC_5;
 8000e96:	2305      	movs	r3, #5
 8000e98:	727b      	strb	r3, [r7, #9]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000e9a:	230e      	movs	r3, #14
 8000e9c:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO_SPI2);
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff f9eb 	bl	800027c <GPIO_Init>

	/* SPI2_MOSI */
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	717b      	strb	r3, [r7, #5]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	71bb      	strb	r3, [r7, #6]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	71fb      	strb	r3, [r7, #7]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinOutputType = GPIO_OUT_PUSHPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	723b      	strb	r3, [r7, #8]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinAltFuncMode = GPIO_ALTFUNC_5;
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	727b      	strb	r3, [r7, #9]
	GPIO_SPI2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000eba:	230f      	movs	r3, #15
 8000ebc:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO_SPI2);
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff f9db 	bl	800027c <GPIO_Init>

	/* 2. Configure SPI1 properties */
//	SPI_Handle_t SPI2_Handle;
	memset(&SPI2_Handle, 0, sizeof(SPI2_Handle));
 8000ec6:	2220      	movs	r2, #32
 8000ec8:	2100      	movs	r1, #0
 8000eca:	483a      	ldr	r0, [pc, #232]	; (8000fb4 <main+0x2d0>)
 8000ecc:	f000 f8c5 	bl	800105a <memset>

	SPI2_Handle.SPIx = SPI2;
 8000ed0:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <main+0x2d0>)
 8000ed2:	4a39      	ldr	r2, [pc, #228]	; (8000fb8 <main+0x2d4>)
 8000ed4:	601a      	str	r2, [r3, #0]
	SPI2_Handle.SPIConfig.SPI_DeviceMode = SPI_MODE_SLAVE;
 8000ed6:	4b37      	ldr	r3, [pc, #220]	; (8000fb4 <main+0x2d0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	711a      	strb	r2, [r3, #4]
	SPI2_Handle.SPIConfig.SPI_BusConfig = SPI_BUS_FDUPLEX;
 8000edc:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <main+0x2d0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	715a      	strb	r2, [r3, #5]
	SPI2_Handle.SPIConfig.SPI_ClkSpeed = SPI_CLOCK_SPEED_DIV_8;
 8000ee2:	4b34      	ldr	r3, [pc, #208]	; (8000fb4 <main+0x2d0>)
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	719a      	strb	r2, [r3, #6]
	SPI2_Handle.SPIConfig.SPI_DFF = SPI_DATA_FRAME_8;
 8000ee8:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <main+0x2d0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	71da      	strb	r2, [r3, #7]
	SPI2_Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000eee:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <main+0x2d0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	721a      	strb	r2, [r3, #8]
	SPI2_Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <main+0x2d0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	725a      	strb	r2, [r3, #9]
	SPI2_Handle.SPIConfig.SPI_SSM = SPI_SSM_DIS;
 8000efa:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <main+0x2d0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2_Handle);
 8000f00:	482c      	ldr	r0, [pc, #176]	; (8000fb4 <main+0x2d0>)
 8000f02:	f7ff fc9d 	bl	8000840 <SPI_Init>

	SPI_Receive_IT (&SPI2_Handle, &rx_data, 1);
 8000f06:	2201      	movs	r2, #1
 8000f08:	492c      	ldr	r1, [pc, #176]	; (8000fbc <main+0x2d8>)
 8000f0a:	482a      	ldr	r0, [pc, #168]	; (8000fb4 <main+0x2d0>)
 8000f0c:	f7ff fd6f 	bl	80009ee <SPI_Receive_IT>
//	SPI2->CR1 |= (1<<8);
//	SPI_PeripheralControl(SPI2, DISABLE);
//	SPI_PeripheralControl(SPI2_Handle.SPIx, ENABLE);


	GPIO_WriteOutputPin(GPIO_SPI1.pGPIO, GPIO_PIN_NO_4, GPIO_PIN_SET);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2201      	movs	r2, #1
 8000f14:	2104      	movs	r1, #4
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fb56 	bl	80005c8 <GPIO_WriteOutputPin>
//			delay();
//			btn_status = -btn_status;
//
//		}
//		GPIO_WriteOutputPin(GPIO_SPI1.pGPIO, GPIO_PIN_NO_4, GPIO_PIN_SET);
		if ( btn_status == -1 ) {
 8000f1c:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <main+0x2dc>)
 8000f1e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f26:	d132      	bne.n	8000f8e <main+0x2aa>
			delay();
 8000f28:	f7ff fec6 	bl	8000cb8 <delay>
			GPIO_WriteOutputPin(GPIO_LED.pGPIO, GPIO_PIN_NO_13, GPIO_PIN_RESET);
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	2200      	movs	r2, #0
 8000f30:	210d      	movs	r1, #13
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fb48 	bl	80005c8 <GPIO_WriteOutputPin>

			GPIO_WriteOutputPin(GPIO_SPI1.pGPIO, GPIO_PIN_NO_4, GPIO_PIN_RESET);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fb42 	bl	80005c8 <GPIO_WriteOutputPin>
			SPI_PeripheralControl(SPI1, ENABLE);
 8000f44:	2101      	movs	r1, #1
 8000f46:	4819      	ldr	r0, [pc, #100]	; (8000fac <main+0x2c8>)
 8000f48:	f7ff fe8e 	bl	8000c68 <SPI_PeripheralControl>
			SPI_PeripheralControl(SPI2, ENABLE);
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	481a      	ldr	r0, [pc, #104]	; (8000fb8 <main+0x2d4>)
 8000f50:	f7ff fe8a 	bl	8000c68 <SPI_PeripheralControl>

//			SPI2->CR1 &= ~(1<<8);
			SPI_Transmit(SPI1, &tx_data, 1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	491b      	ldr	r1, [pc, #108]	; (8000fc4 <main+0x2e0>)
 8000f58:	4814      	ldr	r0, [pc, #80]	; (8000fac <main+0x2c8>)
 8000f5a:	f7ff fcf6 	bl	800094a <SPI_Transmit>
			tx_data++;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <main+0x2e0>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <main+0x2e0>)
 8000f68:	701a      	strb	r2, [r3, #0]
//			SPI_Receive(SPI2, rx_buffer, 1);

//			SPI_Transmit(SPI2, spi2_txBuffer, 3);
//			SPI2->CR1 |= (1<<8);

			SPI_PeripheralControl(SPI2, DISABLE);
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4812      	ldr	r0, [pc, #72]	; (8000fb8 <main+0x2d4>)
 8000f6e:	f7ff fe7b 	bl	8000c68 <SPI_PeripheralControl>
			SPI_PeripheralControl(SPI1, DISABLE);
 8000f72:	2100      	movs	r1, #0
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <main+0x2c8>)
 8000f76:	f7ff fe77 	bl	8000c68 <SPI_PeripheralControl>
			GPIO_WriteOutputPin(GPIO_SPI1.pGPIO, GPIO_PIN_NO_4, GPIO_PIN_SET);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2104      	movs	r1, #4
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fb21 	bl	80005c8 <GPIO_WriteOutputPin>
			btn_status=1;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <main+0x2dc>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
 8000f8c:	e7c6      	b.n	8000f1c <main+0x238>
		} else {
			GPIO_WriteOutputPin(GPIO_LED.pGPIO, GPIO_PIN_NO_13, GPIO_PIN_SET);
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	2201      	movs	r2, #1
 8000f92:	210d      	movs	r1, #13
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fb17 	bl	80005c8 <GPIO_WriteOutputPin>
			delay();
 8000f9a:	f7ff fe8d 	bl	8000cb8 <delay>
		if ( btn_status == -1 ) {
 8000f9e:	e7bd      	b.n	8000f1c <main+0x238>
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	20000024 	.word	0x20000024
 8000fac:	40013000 	.word	0x40013000
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	20000044 	.word	0x20000044
 8000fb8:	40003800 	.word	0x40003800
 8000fbc:	20000021 	.word	0x20000021
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000020 	.word	0x20000020

08000fc8 <EXTI0_IRQHandler>:
		}
//		delay();
	}
}

void EXTI0_IRQHandler(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff fbed 	bl	80007ac <GPIO_IRQHandling>
	btn_status = -1;
 8000fd2:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <EXTI0_IRQHandler+0x14>)
 8000fd4:	22ff      	movs	r2, #255	; 0xff
 8000fd6:	701a      	strb	r2, [r3, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000000 	.word	0x20000000

08000fe0 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	/* transmit on SPI 1 */
	SPI_ISR_Handler(&SPI1_Handle);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <SPI1_IRQHandler+0x10>)
 8000fe6:	f7ff fd25 	bl	8000a34 <SPI_ISR_Handler>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000024 	.word	0x20000024

08000ff4 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	/* transmit on SPI 1 */
	SPI_ISR_Handler(&SPI2_Handle);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <SPI2_IRQHandler+0x10>)
 8000ffa:	f7ff fd1b 	bl	8000a34 <SPI_ISR_Handler>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000044 	.word	0x20000044

08001008 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800100a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800100c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <LoopForever+0x6>)
  ldr r1, =_edata
 8001012:	490d      	ldr	r1, [pc, #52]	; (8001048 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <LoopForever+0xe>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001028:	4c0a      	ldr	r4, [pc, #40]	; (8001054 <LoopForever+0x16>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001036:	f000 f819 	bl	800106c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800103a:	f7ff fe53 	bl	8000ce4 <main>

0800103e <LoopForever>:

LoopForever:
  b LoopForever
 800103e:	e7fe      	b.n	800103e <LoopForever>
  ldr   r0, =_estack
 8001040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800104c:	080010d4 	.word	0x080010d4
  ldr r2, =_sbss
 8001050:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001054:	20000064 	.word	0x20000064

08001058 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC_IRQHandler>

0800105a <memset>:
 800105a:	4402      	add	r2, r0
 800105c:	4603      	mov	r3, r0
 800105e:	4293      	cmp	r3, r2
 8001060:	d100      	bne.n	8001064 <memset+0xa>
 8001062:	4770      	bx	lr
 8001064:	f803 1b01 	strb.w	r1, [r3], #1
 8001068:	e7f9      	b.n	800105e <memset+0x4>
	...

0800106c <__libc_init_array>:
 800106c:	b570      	push	{r4, r5, r6, lr}
 800106e:	4d0d      	ldr	r5, [pc, #52]	; (80010a4 <__libc_init_array+0x38>)
 8001070:	4c0d      	ldr	r4, [pc, #52]	; (80010a8 <__libc_init_array+0x3c>)
 8001072:	1b64      	subs	r4, r4, r5
 8001074:	10a4      	asrs	r4, r4, #2
 8001076:	2600      	movs	r6, #0
 8001078:	42a6      	cmp	r6, r4
 800107a:	d109      	bne.n	8001090 <__libc_init_array+0x24>
 800107c:	4d0b      	ldr	r5, [pc, #44]	; (80010ac <__libc_init_array+0x40>)
 800107e:	4c0c      	ldr	r4, [pc, #48]	; (80010b0 <__libc_init_array+0x44>)
 8001080:	f000 f818 	bl	80010b4 <_init>
 8001084:	1b64      	subs	r4, r4, r5
 8001086:	10a4      	asrs	r4, r4, #2
 8001088:	2600      	movs	r6, #0
 800108a:	42a6      	cmp	r6, r4
 800108c:	d105      	bne.n	800109a <__libc_init_array+0x2e>
 800108e:	bd70      	pop	{r4, r5, r6, pc}
 8001090:	f855 3b04 	ldr.w	r3, [r5], #4
 8001094:	4798      	blx	r3
 8001096:	3601      	adds	r6, #1
 8001098:	e7ee      	b.n	8001078 <__libc_init_array+0xc>
 800109a:	f855 3b04 	ldr.w	r3, [r5], #4
 800109e:	4798      	blx	r3
 80010a0:	3601      	adds	r6, #1
 80010a2:	e7f2      	b.n	800108a <__libc_init_array+0x1e>
 80010a4:	080010cc 	.word	0x080010cc
 80010a8:	080010cc 	.word	0x080010cc
 80010ac:	080010cc 	.word	0x080010cc
 80010b0:	080010d0 	.word	0x080010d0

080010b4 <_init>:
 80010b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b6:	bf00      	nop
 80010b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ba:	bc08      	pop	{r3}
 80010bc:	469e      	mov	lr, r3
 80010be:	4770      	bx	lr

080010c0 <_fini>:
 80010c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c2:	bf00      	nop
 80010c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010c6:	bc08      	pop	{r3}
 80010c8:	469e      	mov	lr, r3
 80010ca:	4770      	bx	lr
